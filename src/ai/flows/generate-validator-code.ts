
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates C++ code to validate inputs for a given problem statement.
 *
 * - generateValidatorCode - A function that generates C++ validator code.
 * - GenerateValidatorCodeInput - The input type for the generateValidatorCode function.
 * - GenerateValidatorCodeOutput - The return type for the generateValidatorCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateValidatorCodeInputSchema = z.object({
  problemStatement: z
    .string()
    .describe('The problem statement including input format details.'),
});

export type GenerateValidatorCodeInput = z.infer<typeof GenerateValidatorCodeInputSchema>;

const GenerateValidatorCodeOutputSchema = z.object({
  validatorCode: z
    .string()
    .describe('The generated C++ code to validate the input.'),
});

export type GenerateValidatorCodeOutput = z.infer<typeof GenerateValidatorCodeOutputSchema>;

export async function generateValidatorCode(
  input: GenerateValidatorCodeInput
): Promise<GenerateValidatorCodeOutput> {
  return generateValidatorCodeFlow(input);
}

const generateValidatorCodePrompt = ai.definePrompt({
  name: 'generateValidatorCodePrompt',
  input: {schema: GenerateValidatorCodeInputSchema},
  output: {schema: GenerateValidatorCodeOutputSchema},
  prompt: `You are a C++ expert tasked with generating validator code for competitive programming problems using testlib.h.

  Based on the following problem statement, generate C++ code that validates the input.
  The validator must ensure the input strictly adheres to all format and constraint details specified in the problem statement.
  It is crucial to use 'testlib.h' utilities for robust validation (e.g., \`inf.readInt()\`, \`inf.readSpace()\`, \`inf.readEoln()\`, \`inf.ensure()\`).
  The validator code should read from standard input (via \`inf\` object from testlib.h).
  It must call \`registerValidation(argc, argv);\` at the beginning of main.
  It must return 0 by calling \`inf.readEof();\` and implicitly returning 0 if the input is valid according to all problem constraints.
  If any validation fails, it must exit with a non-zero code by calling an appropriate \`quitf(...)\` function from testlib.h (e.g., \`quitf(_wa, "Error message about specific validation failure");\`).

  Problem Statement:
  {{{problemStatement}}}

  Ensure the generated code is efficient, correct, and adheres to best practices for competitive programming validators using testlib.h.
  Include necessary headers, primarily \`#include "testlib.h"\`.
  `,
});

const generateValidatorCodeFlow = ai.defineFlow(
  {
    name: 'generateValidatorCodeFlow',
    inputSchema: GenerateValidatorCodeInputSchema,
    outputSchema: GenerateValidatorCodeOutputSchema,
  },
  async input => {
    const {output} = await generateValidatorCodePrompt(input);
    return output!;
  }
);

