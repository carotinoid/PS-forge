// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates C++ code to validate inputs for a given problem statement.
 *
 * - generateValidatorCode - A function that generates C++ validator code.
 * - GenerateValidatorCodeInput - The input type for the generateValidatorCode function.
 * - GenerateValidatorCodeOutput - The return type for the generateValidatorCode function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateValidatorCodeInputSchema = z.object({
  problemStatement: z
    .string()
    .describe('The problem statement including input format details.'),
});

export type GenerateValidatorCodeInput = z.infer<typeof GenerateValidatorCodeInputSchema>;

const GenerateValidatorCodeOutputSchema = z.object({
  validatorCode: z
    .string()
    .describe('The generated C++ code to validate the input.'),
});

export type GenerateValidatorCodeOutput = z.infer<typeof GenerateValidatorCodeOutputSchema>;

export async function generateValidatorCode(
  input: GenerateValidatorCodeInput
): Promise<GenerateValidatorCodeOutput> {
  return generateValidatorCodeFlow(input);
}

const generateValidatorCodePrompt = ai.definePrompt({
  name: 'generateValidatorCodePrompt',
  input: {schema: GenerateValidatorCodeInputSchema},
  output: {schema: GenerateValidatorCodeOutputSchema},
  prompt: `You are a C++ expert tasked with generating validator code for competitive programming problems.

  Based on the following problem statement, generate C++ code that validates the input.
  If necessary, use testlib.h.

  Problem Statement:
  {{problemStatement}}

  Ensure the generated code is efficient, correct, and adheres to best practices.

  The validator code should read from standard input and return 0 if the input is valid, and a non-zero value otherwise.
  `,
});

const generateValidatorCodeFlow = ai.defineFlow(
  {
    name: 'generateValidatorCodeFlow',
    inputSchema: GenerateValidatorCodeInputSchema,
    outputSchema: GenerateValidatorCodeOutputSchema,
  },
  async input => {
    const {output} = await generateValidatorCodePrompt(input);
    return output!;
  }
);
